# NOTE: This file was auto-generated by SpeedySVCService, 
#       and it's usually best not to modify it directly
from typing import Union, List, Tuple
from speedysvc.service_method import service_method
from speedysvc.SpeedySVCClient import SpeedySVCClient
from speedysvc.compression.compression_types import snappy_compression


class TestServiceClient(SpeedySVCClient):
    def __init__(self,
                 address: Union[List, Tuple, str] = "shm://test_server_methods:5535",
                 use_spinlock: bool = True,
                 use_in_process_lock: bool = True,
                 compression_inst=snappy_compression):
        SpeedySVCClient.__init__(self, address, use_spinlock, use_in_process_lock, compression_inst)
        
    @service_method()
    def test_defaults(self, data, default='test'):
        return self._call_remote(self.test_defaults.metadata,
                                 b"test_defaults", 
                                 (data, default,),
                                 None,
                                 None)
        
    @service_method()
    def test_json_echo(self, data):
        return self._call_remote(self.test_json_echo.metadata,
                                 b"test_json_echo", 
                                 (data,),
                                 None,
                                 None)
        
    @service_method(returns_iterator=True,
                    iterator_page_size=10000)
    def test_json_echo_iterator(self, data):
        return self._iter_remote(self.test_json_echo_iterator.metadata,
                                 b"test_json_echo_iterator", 
                                 (data,),
                                 None,
                                 None)
        
    @service_method(params='marshal',
                    returns='marshal')
    def test_marshal_echo(self, data):
        return self._call_remote(self.test_marshal_echo.metadata,
                                 b"test_marshal_echo", 
                                 (data,),
                                 None,
                                 None)
        
    @service_method(params='msgpack',
                    returns='msgpack')
    def test_msgpack_method(self, data):
        return self._call_remote(self.test_msgpack_method.metadata,
                                 b"test_msgpack_method", 
                                 (data,),
                                 None,
                                 None)
        
    @service_method(params='pickle',
                    returns='pickle')
    def test_pickle_echo(self, data):
        return self._call_remote(self.test_pickle_echo.metadata,
                                 b"test_pickle_echo", 
                                 (data,),
                                 None,
                                 None)
        
    @service_method(params='raw',
                    returns='raw')
    def test_raw_echo(self, data: bytes):
        return self._call_remote_raw(self.test_raw_echo.metadata,
                                     b"test_raw_echo",
                                     data)
        
    @service_method(params='raw',
                    returns='raw')
    def test_raw_return_len(self, data: bytes):
        return self._call_remote_raw(self.test_raw_return_len.metadata,
                                     b"test_raw_return_len",
                                     data)
        

from speedysvc.serialisation.JSONSerialisation import JSONSerialisation
from speedysvc.serialisation.MarshalSerialisation import MarshalSerialisation
from speedysvc.serialisation.MsgPackSerialisation import MsgPackSerialisation
from speedysvc.serialisation.PickleSerialisation import PickleSerialisation
from speedysvc.serialisation.RawSerialisation import RawSerialisation
